makeCacheMatrix<-function(x= matrix()) {in<- NULL set <- function(y){x<<- y in<<- NULL} get<-function() x  setmean <- function(mean) in<<- mean  getmean<- function() in  list(set= set, get=get, setmean=setmean,)          }
makeCacheMatrix<- function(x= matrix()) {
in<- NULL
set <- function(y){
x<<- y
in<<- NULL
}
get<-function() x
setInverse <- function(Inverse)
in<<- inverse
getInverse<- function() in
list(set= set,
get= get,
setInverse=setInverse,
getInverse= getInverse)
}
makeCacheMatrix<- function(x= matrix()) {
inv<- NULL
set <- function(y){
x<<- y
inv<<- NULL
}
get<-function() x
setInverse <- function(Inverse) inv<<- inverse
getInverse<- function() inv
list(set= set,
get= get,
setInverse=setInverse,
getInverse= getInverse)
}
cacheSolve<- function(x, ...) {
##Return matrix that is the inverse of 'x'
inv<- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data<- x$get()
inv<- solve(data, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
cacheSolve(my_matrix)
cacheSolve<- function(x, ...) {
##Return matrix that is the inverse of 'x'
inv<- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat<- x$get()
inv<- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve(my_matrix)
my_matrix$getInverse()
cacheSolve(my_matrix)
makeCacheMatrix<- function(x= matrix()) {
inv<- NULL
set <- function(y){
x<<- y
inv<<- NULL
}
get<-function() x
setInverse <- function(inverse) inv<<- inverse
getInverse<- function() inv
list(set= set,
get= get,
setInverse=setInverse,
getInverse= getInverse)
}
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2)
)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
